---
title: "Generating Data"
format: html
---

# Preparations

## Source Functions

```{r}
source("../01_functions/functions.R")
```


```{r}
library(remulate)
library(tidyverse)
library(MASS)
library(future)
library(future.apply)
```

## Generate Exogenous Variables

```{r}
RNGkind("L'Ecuyer-CMRG")
set.seed(123) # set seed for reproducibility
n <- 50 # set number of actors

# Generate continuous variables
mean_vec <- rep(0, 8)
cov_matrix <- diag(8)  # no covariance
mv_data <- mvrnorm(n = n, mu = mean_vec, Sigma = cov_matrix)

# Name variables
colnames(mv_data) <- c("z1", "z2", "z3", "z7", "z8", "z9", "z10", "z11")

# Generate dummy variables

# with non-zero effect
binary_first <- data.frame(
  z4 = sample(c(0,1), n, replace = TRUE),
  z5 = sample(c(0,1), n, replace = TRUE),
  z6 = sample(c(0,1), n, replace = TRUE)
)

# without effect
binary_second <- data.frame(
  z12 = sample(c(0,1), n, replace = TRUE),
  z13 = sample(c(0,1), n, replace = TRUE),
  z14 = sample(c(0,1), n, replace = TRUE),
  z15 = sample(c(0,1), n, replace = TRUE),
  z16 = sample(c(0,1), n, replace = TRUE)
)

# combine all variables into a data frame
covar <- data.frame(
  name = 1:n,
  time = 0,
  mv_data[, c("z1", "z2", "z3")],
  binary_first,
  mv_data[, c("z7", "z8", "z9", "z10", "z11")],
  binary_second
)

save(covar, file = "../../Data/01_simulation/covar.RData")
```

## Set Up Effects

```{r}
(effect_sizes <- log(c(1.22, 1.86, 3.00)))

effects <- ~ remulate::baseline(-8) +
  remulate::indegreeSender(0.7, scaling = "std") +
  remulate::reciprocity(0.15, scaling = "std") +
  remulate::outdegreeReceiver(-0.45, scaling = "std") +
  remulate::indegreeReceiver(0, scaling = "std") +
  remulate::outdegreeSender(0, scaling = "std") +
  remulate::totaldegreeSender(0, scaling = "std") +
  remulate::totaldegreeReceiver(0, scaling = "std") +
  remulate::otp(0, scaling = "std") +
  remulate::itp(0, scaling = "std") +
  remulate::isp(0, scaling = "std") +
  remulate::psABBA(0) +
  remulate::psABBY(0) +
  remulate::psABXA(0) +
  remulate::psABXB(0) +
  remulate::psABXY(0) +
  remulate::psABAY(0) +
  #psABAB(0) + #missing in package
  remulate::rrankSend(0) +
  remulate::rrankReceive(0) +
  remulate::recencyContinue(0) +
  remulate::recencySendSender(0) +
  remulate::recencyReceiveReceiver(0) +
  remulate::recencySendReceiver(0) +
  remulate::recencyReceiveSender(0) +
  remulate::osp(0, scaling = "std") +
  remulate::inertia(0, scaling = "std") +
  remulate::minimum(effect_sizes[1], variable = "z1", scaling = "std", attr_actors = covar) +
  remulate::maximum(effect_sizes[1], variable = "z1", scaling = "std", attr_actors = covar) +
  remulate::minimum(effect_sizes[2], variable = "z2", scaling = "std", attr_actors = covar) +
  remulate::maximum(effect_sizes[2], variable = "z2", scaling = "std", attr_actors = covar) +
  remulate::minimum(effect_sizes[3], variable = "z3", scaling = "std", attr_actors = covar) +
  remulate::maximum(effect_sizes[3], variable = "z3", scaling = "std", attr_actors = covar) +
  remulate::same(effect_sizes[1], variable = "z4", attr_actors = covar) +
  remulate::same(effect_sizes[2], variable = "z5", attr_actors = covar) +
  remulate::same(effect_sizes[3], variable = "z6", attr_actors = covar) +
  remulate::minimum(0, variable = "z7", scaling = "std", attr_actors = covar) +
  remulate::maximum(0, variable = "z7", scaling = "std", attr_actors = covar) +
  remulate::minimum(0, variable = "z8", scaling = "std", attr_actors = covar) +
  remulate::maximum(0, variable = "z8", scaling = "std", attr_actors = covar) +
  remulate::minimum(0, variable = "z9", scaling = "std", attr_actors = covar) +
  remulate::maximum(0, variable = "z9", scaling = "std", attr_actors = covar) +
  remulate::minimum(0, variable = "z10", scaling = "std", attr_actors = covar) +
  remulate::maximum(0, variable = "z10", scaling = "std", attr_actors = covar) +
  remulate::minimum(0, variable = "z11", scaling = "std", attr_actors = covar) +
  remulate::maximum(0, variable = "z11", scaling = "std", attr_actors = covar) +
  remulate::same(0, variable = "z12", attr_actors = covar) +
  remulate::same(0, variable = "z13", attr_actors = covar) +
  remulate::same(0, variable = "z14", attr_actors = covar) +
  remulate::same(0, variable = "z15", attr_actors = covar) +
  remulate::same(0, variable = "z16", attr_actors = covar)
```

## Generate Edgelists

### Dependent

```{r}
RNGkind("Mersenne-Twister")
for (i in 1:100) {
  set.seed(i)
  edgelist <- remulateTie(effects,
                          actors = 1:50,
                          events = 7400,
                          time = 10000)
  
  edgelist <- as.data.frame(lapply(edgelist, function(x) {
      attributes(x) <- NULL
      x
    }))
  
  save(edgelist,
       file = paste0("../../Data/01_simulation/01_edgelists_dependent/edgelist_", i, ".RData"))
}
```

### Independent

```{r}
m <- c(100, 200, 400, 800, 1600, 3200, 6400)
sample_sizes <- m + 1000
for (i in seq_along(sample_sizes)) {
  dir.create(paste0("../GeneratedData/edgelists_independent/", m[i]))
  generate_edgelists_parallel(
    effects = effects,
    effect_sizes = effect_sizes,
    covar = covar,
    num_events = sample_sizes[i],
    num_cores = 10,
    start = 1,
    end = 100,
    folder = paste0("../GeneratedData/edgelists_independent/", m[i], "/")
  )
}
```
