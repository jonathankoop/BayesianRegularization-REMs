---
title: "Estimating the Models"
format: html
---

# Preparations

## Source Functions

To import all custom functions, we need to source the `functions.R` file. This file contains all the functions used in this project.

```{r}
source("../01_functions/functions.R")
```

## Load Packages

Additionally, we need to load the required packages.

```{r}
library(remify)
library(remstats)
library(remstimate)
library(shrinkem)
library(tidyverse)
library(MASS)
library(future)
library(future.apply)
library(patchwork)
library(brms)
library(knitr)
library(kableExtra)
```

## Load True Parameters and Covariates

Next, we load the true parameters and covariates used in the simulation. These are stored in the `covar.RData` and `parameters.RData` files, respectively.

```{r}
load("../../Data/01_simulation/covar.RData")
load("../../Data/01_simulation/parameters.RData")
```

## Load and Combine edgelists

Lastly, we load and combine the edgelists generated in `01_generating_data.qmd`.

```{r}
edgelists <- list()
files <- list.files("../../Data/01_simulation/01_edgelists_dependent")

# subset files with edgelist_
files <- files[grep("edgelist_", files)]


for (i in seq_along(files)) {
  load(paste0("../../Data/01_simulation/01_edgelists_dependent/", files[i]))
  
  edgelists[[i]] <- edgelist
}
```

# Estimating REMs

Now we can estimate the REMs using the `estimate_edgelists_parallel` function. This function estimates the models in parallel, which is useful for large datasets. Within the function, MLE, ABR Ridge and ABR Horseshoe are estimated. The function also saves the results in the specified folder.

```{r}
# expected values for m and edgelist indices
m_values <- c(100, 200, 400, 800, 1600, 3200, 6400)
expected_edges <- 1:100

# define naming pattern and find files that match this pattern
files <- list.files("../Results/01_estimates", pattern = "estimates_m_.*_edgelist_.*\\.RData")

# create a function to extract the m value and edgelist index from the file name
extract_values <- function(filename) {
  pattern <- "estimates_m_(\\d+)_edgelist_(\\d+)\\.RData"
  matches <- regexec(pattern, filename)
  parts <- regmatches(filename, matches)[[1]]
  as.numeric(parts[-1])
}

# create data frame with the extracted numbers from the available files
if(length(files) > 0) {
  file_info <- do.call(rbind, lapply(files, extract_values))
  file_info <- data.frame(m = file_info[, 1], edge = file_info[, 2])
} else {
  file_info <- data.frame(m = numeric(0), edge = numeric(0))
}

# create task list for missing combinations
task_list <- lapply(m_values, function(m_val) {
  # find missing edgelists
  present_edges <- file_info$edge[file_info$m == m_val]
  missing_edges <- setdiff(expected_edges, present_edges)
  # create task for each missing edgelist index
  lapply(missing_edges, function(edgelist_index) {
    list(m_val = m_val,
         edgelist_index = edgelist_index,
         edgelist = subset_edgelist_single(edgelists[[edgelist_index]], m_val))
  })
})

# Flatten nested list into a single list
task_list <- unlist(task_list, recursive = FALSE)
```

```{r}
t1 <- Sys.time()
m <- c(100, 200, 400, 800, 1600, 3200, 6400)
num_cores <- 25
estimate_edgelists_parallel(edgelists,
                            parameters,
                            covar,
                            m,
                            folder = "../Results/",
                            num_cores,
                            seed = 123,
                            task_list)
t2 <- Sys.time()

t2 -t1
```

# Run brms with Horseshoe

```{r}
# expected values for m and edgelist indices
m_values <- c(100, 200)
expected_edges <- 1:100

# define naming pattern and find files that match this pattern
files <- list.files("../Results/01b_estimates_brms", pattern = "estimates_brms_hs_m_.*_edgelist_.*\\.RData")

# create a function to extract the m value and edgelist index from the file name
extract_values <- function(filename) {
  pattern <- "estimates_brms_hs_m_(\\d+)_edgelist_(\\d+)\\.RData"
  matches <- regexec(pattern, filename)
  parts <- regmatches(filename, matches)[[1]]
  as.numeric(parts[-1])
}

# create data frame with the extracted numbers from the available files
if(length(files) > 0) {
  file_info <- do.call(rbind, lapply(files, extract_values))
  file_info <- data.frame(m = file_info[, 1], edge = file_info[, 2])
} else {
  file_info <- data.frame(m = numeric(0), edge = numeric(0))
}

# create task list for missing combinations
task_list <- lapply(m_values, function(m_val) {
  # find missing edgelists
  present_edges <- file_info$edge[file_info$m == m_val]
  missing_edges <- setdiff(expected_edges, present_edges)
  # create task for each missing edgelist index
  lapply(missing_edges, function(edgelist_index) {
    list(m_val = m_val,
         edgelist_index = edgelist_index,
         edgelist = subset_edgelist_single(edgelists[[edgelist_index]], m_val))
  })
})

# Flatten nested list into a single list
task_list <- unlist(task_list, recursive = FALSE)
```

```{r}
t1 <- Sys.time()
num_cores <- 100
estimate_brms_parallel(edgelists, parameters, covar, folder = "../Results/", num_cores, 
                       task_list,
                       seed = 123)
t2 <- Sys.time()
```

# Evaluate Estimates

Next, we can evaluate the estimates. For this we first extract the estimates and store them in a single data frame. Then we can assess the bias and variance of the estimates.

## Extract Estimates

```{r}
t1 <- Sys.time()
m <- c(100, 200, 400, 800, 1600, 3200, 6400)
df_estimates <- extract_estimates(
  m = m,
  n_edgelists = 100,
  results_folder = "../Results/",
  num_cores = 220
)
t2 <- Sys.time()
```

```{r}
save(df_estimates, file = "../Results/estimates_df.RData")
```

## Assess Bias and Variance

```{r}
(bias_mle <- bias_estimates(parameters = parameters,
               df_estimates = df_estimates,
               method = "mle"))

(bias_abr_hs <- bias_estimates(parameters = parameters,
                               df_estimates = df_estimates,
                               method = "abr_hs"))

(bias_abr_ridge <- bias_estimates(parameters = parameters,
                                  df_estimates = df_estimates,
                                  method = "abr_ridge"))

(bias_ebr_hs <- bias_estimates(parameters = parameters,
                               df_estimates = df_estimates,
                               method = "ebr_hs"))
```

### Bias Overall

```{r}
mean(bias_mle$data$bias_mle)
mean(bias_abr_hs$data$bias_abr_hs)
mean(bias_abr_ridge$data$bias_abr_ridge)
mean(bias_ebr_hs$data$bias_ebr_hs, na.rm = T)
```

### Variance Overall

```{r}
var(bias_mle$data$bias_mle)
var(bias_abr_hs$data$bias_abr_hs)
var(bias_abr_ridge$data$bias_abr_ridge)
var(bias_ebr_hs$data$bias_ebr_hs, na.rm = T)
```


### Combine into LaTeX Table

The bias and variance is then combined into a LaTeX table

```{r}
bias_all <- bind_rows(
  bias_mle$summary        %>% rename(mean = bias_mle_mean,   var = bias_mle_var)   %>% mutate(method = "mle"),
  bias_abr_hs$summary     %>% rename(mean = bias_abr_hs_mean, var = bias_abr_hs_var) %>% mutate(method = "abr_hs"),
  bias_abr_ridge$summary  %>% rename(mean = bias_abr_ridge_mean, var = bias_abr_ridge_var) %>% mutate(method = "abr_ridge"),
  bias_ebr_hs$summary     %>% rename(mean = bias_ebr_hs_mean, var = bias_ebr_hs_var) %>% mutate(method = "ebr_hs")
) %>%
  mutate(label = sprintf("%.3f (%.2f)", mean, var)) %>%  # format bias and variance
  dplyr::select(m, method, label) %>% # only keep relevant columns
  pivot_wider(
    names_from  = method,
    values_from = label
  ) %>% 
  kable(
    format = "latex",
    col.names = c("Sample Size (M)", "MLE", "ABR HS", "ABR Ridge", "EBR HS"),
    booktabs = TRUE
  )
```

```{r}
save(bias_all, file= "../../Output/03_tables/table_bias_dependent.tex")
```



# Plot Estimates

We additionally plot the estimates, to see the direction of the bias and the variance of the estimates. The plots are generated for the MLE, ABR with Horseshoe and ABR with Ridge.

## Define M Values to Plot

```{r}
m_plots <- c(100, 400, 1600, 6400)
```

## Maximum Likelihood

```{r}
plots_mle <- list()
for (i in seq_along(m_plots)) {
  plots_mle[[i]] <- plot_estimates(df_estimates, parameters, m_val = m_plots[i], estimate = "mle", uncertainty = "ci")
}

plots_mle_combined <- wrap_plots(plots_mle, ncol = 2, guides = "collect") &
  theme(legend.position = "bottom")

ggsave("../../Output/02_plots/01_coefficient_plots/plots_mle.png", plots_mle_combined,
       width = 10, height = 15)
```

## ABR with Horseshoe

```{r}
plots_abr_hs <- list()
for (i in seq_along(m_plots)) {
  plots_abr_hs[[i]] <- plot_estimates(df_estimates, parameters, m_val = m_plots[i], estimate = "abr_hs", uncertainty = "ci")
}

plots_abr_hs_combined <- wrap_plots(plots_abr_hs, ncol = 2, guides = "collect") &
  theme(legend.position = "bottom")

ggsave("../../Output/02_plots/01_coefficient_plots/plots_abr_hs.png", plots_abr_hs_combined,
       width = 10, height = 15)
```

## ABR with Ridge

```{r}
plots_abr_ridge <- list()
for (i in seq_along(m_plots)) {
  plots_abr_ridge[[i]] <- plot_estimates(df_estimates, parameters, m_val = m_plots[i], estimate = "abr_ridge", uncertainty = "ci")
}

plots_abr_ridge_combined <- wrap_plots(plots_abr_ridge, ncol = 2, guides = "collect") &
  theme(legend.position = "bottom")

ggsave("../../Output/02_plots/01_coefficient_plots/plots_abr_ridge.png", plots_abr_ridge_combined,
       width = 10, height = 15)

```
